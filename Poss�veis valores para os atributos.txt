Área funcional Structure
	Módulo Structure:
		<ncl>
			- id* é livre
			- title é livre
			- xmlns tem que ser uma das URLs: "http://www.ncl.org.br/NCL3.0/EDTVProfile", "http://www.ncl.org.br/NCL3.0/BDTVProfile" ou "http://www.ncl.org.br/NCL3.0/CausalConnectorProfile"

		<head>

		<body>
			- id é livre


Área funcional Layout
	Módulo Layout:
		<regionBase>
			- id é livre
			- device pode ser "systemScreen (i)" ou "systemAudio (i)" (onde i é um dispositivo)
		
		<region>
			- id* é livre
			- left, right, top, bottom, height e width possuem valores numéricos não-negativos de duas formas: valores definidos em pixels deve ter "px" ou null após o valor e em porcentagem deve ter "%" após o valor.
			- title é livre (acho que segue as mesmas regras do title do <ncl>)
			- zIndex possui um número inteiro na faixa [0, 255]


Área funcional Components
	Módulo media:
		<media> 
			- id* é livre
-->			- src só pode ter URI como definido na tabela 11
			- refer (acho que segue a mesma regra do refer do <switch> (Módulo ContentControl))
			- instance
			- type só pode ter valores do tipo mimetypes (tabela 13, na página 40, contém apenas alguns exemplos)
			- descriptor ("Quando há mais que um exibidor para o tipo suportado pelo formatador, o elemento <descriptor> pode especificar qual será utilizado para a apresentação. Caso contrário, o formatador deve obrigatoriamente utilizar um exibidor default para aquele tipo de mídia.")

	Módulo context:
		<context>
			- id* é livre
			- refer



Área funcional Interfaces:
	Módulo MediaContentAnchor:
		<area>
			- id* é livre
			- coords ("permite a definição de âncoras de conteúdo representando porções espaciais, através de atributo  coords (como em XHTML)") -> livre
			- begin e end: ("(permite) a definição de âncoras de conteúdo representando porções temporais, através dos atributos  begin e  end")
			               ("No caso de um elemento <media> do tipo application/x-ginga-time, os atributos  begin  e  end devem obrigatoriamente ser sempre especificados e correspondem a um tempo absoluto do horário de Greenwich (GMT)")
			- coords, begin e end ("(permite) a definição de âncoras de conteúdo representando porções espaço-temporais através dos atributos coords, begin e end (como em SMIL)")	
			- text e position: ("permite a definição de âncoras textuais, através dos atributos text e position")
			- first e last: ("definir uma âncora de conteúdo com base no número de amostras de áudio ou frames de vídeo, através dos atributos first e last, que devem obrigatoriamente indicar a amostra/frame inicial e final")
			- label ("especifica uma cadeia de caracteres que deve ser utilizada pelo exibidor de mídias para identificar uma região de conteúdo") ->livre

	Módulo CompositeNodeInterface:
		<port>
			- id* é livre
			- component* ("especifica uma porta de um nó de composição com seu respectivo mapeamento para uma interface (atributo interface) de um de seus componentes (especificado pelo atributo component)")
			- interface ("especifica uma porta de um nó de composição com seu respectivo mapeamento para uma interface (atributo interface) ")

	Módulo PropertyAnchor:
		<property>
			- name* pode possuir os valores: top, left, bottom, right, width, height, explicitDur, background, transparency,  visible,  fit,  scroll,  style,  soundLevel,  balanceLevel,  trebleLevel,  bassLevel,  fontColor, fontFamily, fontStyle, fontSize, fontVariant, fontWeight, reusePlayer, playerLife,  location,  size e  bounds
			         ("indica o nome da propriedade ou grupo de propriedades")
			- value: ("atributo opcional que define um valor inicial para a propriedade name")
			caso name seja:	- top, left, bottom ou right: Número real na faixa [0,100] terminando com o caractere “%”, ou um valor inteiro especificando o atributo em pixels 
					- width ou height: Número real na faixa [0,100] terminando com o caractere “%”, ou um valor inteiro não negativo especificando o atributo em pixels
					- location: Dois números separados por vírgula, cada um seguindo as regras de valor especificadas para parâmetros left e top, respectivamente
					- size: Dois valores separados por vírgula. Cada valor deve obrigatoriamente seguir as mesmas regras especificadas para parâmetros de width e height, respectivamente 
					- bounds: Quatro valores separados por vírgula. Cada valor deve obrigatoriamente seguir as mesmas regras especificadas para parâmetros left, top, width e height, respectivamente
					- background: “white”, “black”, “silver”, “gray”, red”, “maroon”, fuchsia”, “purple”, “lime”, “green”, “yellow”, “olive”, “blue”, “navy”, “aqua”, “teal” ou  “transparent”. Além dos valores de cores definidos na ABNT NBR 15606-1
					- visible: "true" ou "false"
					- fit: “fill”, “hidden”, “meet”, “meetBest”, “slice”
					- scroll: “none”, “horizontal”, “vertical”, “both”, ou “automatic”
-->					- style: Localizador de um arquivo de folha de estilo
					- soundLevel, balanceLevel, trebleLevel e bassLevel: Um número real na faixa [0, 1], ou um número real na faixa [0,100] terminando com o caractere “%”
					- reusePlayer: Valor booleano: “false”, “true”. Valor default = “false”
					- playerLife: “keep”, “close”. Valor default = “close”	
					- transparency: Um número real na faixa [0,1], ou um número real na faixa [0,100] terminando com o caractere “%”
					- fontColor: Cor da fonte (“white”, “black”, “silver”, “gray”, red”, “maroon”, fuchsia”, “purple”, “lime”, “green”, “yellow”, “olive”, “blue”, “navy”, “aqua”, ou “teal”)
----->					- fontFamily: Uma lista priorizada de nomes de família de fonts e/ou nomes genéricos de famílias
					- fontStyle: Estilo da fonte (“normal”,ou “italic”) 
					- fontSize: Tamanho da fonte
					- fontVariant: Forma de exibição do texto: fonte em “small-caps” ou “normal”
					- fontWeight: Peso da fonte (“normal”, ou “bold”)
					- explicitDur: (regra igual ao begin e end do <area>) (regra igual ao explicitDur do <descriptor>)

	Módulo SwitchInterface:
		<switch>

		<switchPort>
			- id* é livre

		<mapping>
			- component* ("Um elemento de mapeamento define um caminho a partir do <switchPort> para uma interface (atributo interface) de um dos componentes do <switch> (especificados por seu atributo component).")
			- interface ("Um elemento de mapeamento define um caminho a partir do <switchPort> para uma interface (atributo interface)")


rea funcional Presentation Specification
	Módulo Descriptor:
		<descriptor>
			- id* é livre
			- explicitDur: definido pelo módulo Timing ("duração ideal de um objeto (explicitDur)"). ("A duração de um evento é o tempo que ele permanece  no estado ocorrendo. Tal duração pode ser intrínseca ao  objeto de mídia, explicitamente especificada por um autor (atributo explicitDur de um elemento <descriptor>), ou derivado de um relacionamento.")
			- freeze: definido pelo módulo Timing ("o que acontece com um objeto ao final de sua apresentação (freeze)")
			- player: identifica a ferramenta de apresentação a ser utilizada 
			- region: atributo definido pelo módulo Layout. Seu valor refere-se a um <region>.
			- moveLeft ("O atributo  moveLeftespecifica um valor igual ao valor do focusIndex associado ao elemento sobre o qual o foco será aplicado quando a tecla “seta para a esquerda” (“left arrow key”) for pressionada.  ")
			- moveRight ("O atributo moveRight especifica um valor igual ao valor do focusIndex associado ao elemento sobre o qual o foco será aplicado quando a tecla “seta para a direita “(“right arrow key”) for pressionada.")
			- moveUp ("O atributo moveUp especifica um valor igual ao valor do focusIndex associado ao elemento sobre o qual o foco será aplicado quando a tecla “seta para cima” (“up arrow key”) for pressionada.")
			- moveDown ("O atributo moveDown especifica um valor igual ao valor do focusIndex associado ao elemento sobre o qual o foco será aplicado quando a tecla “seta para baixo” (“down arrow key”) for pressionada.  ")
			- focusIndex: natural maior ou igual a 0 ("O atributo  focusIndex especifica um índice para o elemento <media> sobre o qual o foco pode ser aplicado, quando esse elemento estiver em exibição, utilizando o elemento <descriptor> que definiu o atributo")
			- focusBorderColor: “white”, “black”, “silver”, “gray”, “red”, “maroon”, “fuchsia”, “purple”, “lime”, “green”, “yellow”, “olive”, “blue”, “navy”, “aqua”, ou “teal”
			- focusBorderWidth: valores numéricos ?(inteiros ou reais)? -> pode ser 0, negativo ou positivo
			- focusBorderTransparency: deve obrigatoriamente ser um valor real entre 0 e 1, ou um valor real na faixa [0,100] terminando com o caractere “%” 
-->			- focusSrc ("O atributo  focusSrc pode especificar um conteúdo alternativo  a ser apresentado, ao invés do conteúdo  da apresentação atual, se um elemento receber o foco. Esse atributo segue as mesmas regras do atributo  src  do elemento <media>. ("só pode ter URI como definido na tabela 11")")
			- selBorderColor ("Quando selecionada, a caixa definida pelos atributos de posicionamento de elemento deve obrigatoriamente ser destacada com a cor definida pelo atributo selBorderColor")
-->			- focusSelSrc ("Quando um elemento em foco é selecionado pressionando a tecla de ativação, o atributo  focusSelSrc pode especificar um conteúdo de mídia alternativo a ser apresentado, ao invés da apresentação atual. Este atributo segue as mesmas regras do atributo  src do elemento <media>.")
			- transIn e transOut: ("O valor dos atributos transIn e transOut é uma lista separada por ponto e vírgula dos identificadores de transição. Cada um dos identificadores deve obrigatoriamente corresponder ao valor do identificador XML de um dos elementos de transição anteriormente definidos no elemento <transitionBase>")

		<descriptorParam>
			- name* pode ser: top, left, bottom, right, width, height, explicitDur, location, size, bounds, background, visible, fit,  scroll, style, soundLevel, balanceLevel, trebleLevel, bassLevel, reusePlayer e playerLife
			- value* pode ser:
				- caso o name seja top, left, bottom ou right: Número real na faixa [0,100] terminando com o caractere “%”, ou um valor inteiro especificando o atributo em pixels 
				- width ou height: Número real na faixa [0,100] terminando com o caractere “%”, ou um valor inteiro não negativo especificando o atributo em pixels
				- location: Dois números separados por vírgula, cada um seguindo as regras de valor especificadas para parâmetros left e top, respectivamente
				- size: Dois valores separados por vírgula. Cada valor deve obrigatoriamente seguir as mesmas regras especificadas para parâmetros de width e height, respectivamente 
				- bounds: Quatro valores separados por vírgula. Cada valor deve obrigatoriamente seguir as mesmas regras especificadas para parâmetros left, top, width e height, respectivamente
				- background: “white”, “black”, “silver”, “gray”, red”, “maroon”, fuchsia”, “purple”, “lime”, “green”, “yellow”, “olive”, “blue”, “navy”, “aqua”, “teal” ou  “transparent”. Além dos valores de cores definidos na ABNT NBR 15606-1
				- visible: "true" ou "false"
				- fit: “fill”, “hidden”, “meet”, “meetBest”, “slice”
				- scroll: “none”, “horizontal”, “vertical”, “both”, ou “automatic”
				- style: Localizador de um arquivo de folha de estilo
				- soundLevel, balanceLevel, trebleLevel e bassLevel: Um número real na faixa [0, 1], ou um número real na faixa [0,100] terminando com o caractere “%”
				- reusePlayer: Valor booleano: “false”, “true”. Valor default = “false”
				- playerLife: “keep”, “close”. Valor default = “close”

		<descriptorBase>
			- id é livre


Área funcional Linking
	Módulo Linking:
		<link>
			- id é livre
---->			- xconnector*: tem que ter algum dos seguintes formatos: alias#connector_id, documentURI_value#connector_id ou connector_id ("refere-se ao URI de um conector hipermídia")
		
		<bind>
			- role* ("usado para fazer referência a um papel do conector") -> livre
			- component* ("usado para identificar o nó")
			- interface ("usado para fazer referência a uma interface do nó")
			- descriptor: atributo do Módulo Descriptor ("usado para fazer referência a um descritor a ser associado com o nó")

		<linkParam>
			- name* faz referência ao nome de um parâmetro do conector (caso esse parâmetro exista)
			- value* define um valor a ser atribuído ao respectivo parâmetro

		<bindParam>
			- name* faz referência ao nome de um parâmetro do conector (caso esse parâmetro exista)
			- value* define um valor a ser atribuído ao respectivo parâmetro


Área funcional Connectors
	Módulo ConnectorCommonPart:
		<connectorParam>
			- name* ("Para especificar quais atributos recebem valores de parâmetro definidos pelo conector, seus valores são especificados como o nome do parâmetro, precedido pelo símbolo $.  ")
			- type

	Módulo ConnectorAssessmentExpression: 
		<assessmentStatement>
			- comparator*

		<attributeAssessment>
			- role*
			- eventType* pode ser: "selection", "presentation" ou “attribution”
			- key ("Se o valor de  eventType for “selection” (seleção), convém ao <attributeAssessment> também definir sobre qual equipamento a seleção se refere (por exemplo, teclas de um teclado ou controle remoto), através do seu atributo key") (Acho que segue as mesmas regras de key do <simpleCondition>)
			- attributeType*:
				- caso eventType seja "presentation", então pode ser: “occurrences”, “repetitions” ou “state”
				- caso eventType seja "selection", então pode ser: “occurrences” ou “state”
				- caso eventType seja "attribution", então pode ser: "occurrences", "state", "repetiton" ou "nodeProperty"
			- offset

		<valueAssessment>
			- value* deve ter um valor de estado de evento, ou qualquer valor a ser comparado com uma propriedade do nó ou atributo de evento.

		<compoundStatement>
			- operator* pode ser "and" ou "or"
			- isNegated ("especificar se o elemento-filho do  <compoundStatement> deve obrigatoriamente ser negado antes que a operação Booleana seja avaliada. ")

	Módulo ConnectorCausalExpression:
		<simpleCondition>
			- role*, transition e eventType: seus valores estão relacionados na tabela 24 (página 49)
			- delay ("especificando que a condição é verdadeira após um período de retardo a partir do momento em que a transição ocorre.")
			- key (pode ser utilizado caso o eventType for "selection") deve aceitar pelo menos os seguintes valores: “0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “A”, “B”, “C”, “D”, “E”, “F”, “G”, “H”, “I”, “J”, “K”, “L”, “M”, “N”, “O”, “P”, “Q”, “R”, “S”, “T”, “U”, “V”, “W”, “X”, “Y”, “Z”, “*”, “#”, “MENU”, “INFO”, “GUIDE”, “CURSOR_DOWN”, “CURSOR_LEFT”, “CURSOR_RIGHT”, “CURSOR_UP”, “CHANNEL_DOWN”, “CHANNEL_UP”, “VOLUME_DOWN”, “VOLUME_UP”, “”, “ENTER”, “RED”, “GREEN”, “YELLOW”, “BLUE”, “BACK”, “EXIT”, “POWER”, “REWIND”, “STOP”, “EJECT”, “PLAY”, “RECORD” e “PAUSE” 
			- min deve ser um valor finito positivo, maior que zero e menor ou igual ao valor max (acho que deve ser um Natural)
			- max deve ser um valor finito positivo maior que min ou "unbounded" (acho que deve ser um Natural)
			- qualifier pode ser "and" ou "or"

		<compoundCondition>
			- operator* pode ser "and" ou "or"
			- delay ("especificando que a condição composta é verdadeira depois que um tempo de retardo do momento em que a expressão, relacionada a seus elementosfilhos, for verdadeira.")

		<simpleAction>
			- role*, actionType e eventType: seus valores estão relacionados na Tabela 26 na página 50
			- delay ("especificando, quando definido, que a ação deve obrigatoriamente ser disparada apenas após esperar pelo tempo especificado")
			- value ("Se um valor eventType for “attribution”, o elemento <simpleAction> também deve obrigatoriamente definir o valor a ser atribuído, através de seu atributo value.")
			- min ("especifica o número mínimo (atributo  min) dos participantes de um  role (número de  binds), quando o <causalConnector> é utilizado para criar um elo.")
			- max ("especifica o número máximo (atributo  max) dos participantes de um  role (número de  binds), quando o <causalConnector> é utilizado para criar um elo.") -> pode ser "unbounded"
			- qualifier: "par" ou "seq"
			- repeat e 
			- repeatDelay ("Além disso, o <simpleAction> também pode definir um atributo  repeat para ser aplicado ao atributo  repetitions do evento, e um atributo repeatDelay, para ser aguardado antes da repetição da ação.  ")
			- duration: definido pelo Módulo Animation ("Ao atribuir um novo valor para uma propriedade, a alteração é instantânea por  default  (duration=”0”), mas a alteração também pode ser feita durante um período explicitamente declarado, especificado pelo atributo duration. ")
			- by: definido pelo Módulo Animation ("Além disso, ao atribuir um novo valor a uma propriedade, a alteração do valor antigo para o novo pode ser linear por default (by=”indefinite”), ou feita passo a passo, com o passo especificado pelo atributo by.") 

		<compoundAction>
			- operator*: "par" ou "seq"
			- delay: ("especificando que a ação composta deve obrigatoriamente ser aplicada após o retardo especificado.")


	Módulo ConnectorTransitionAssessment:
	
	Módulo CausalConnector:
		<causalconnector>
			- id* é livre

	Módulo ConstraintConnector: (não considerado nesta Norma)
	
	Módulo ConnectorBase:
		<connectorBase>
			- id é livre

	Módulo CompositeConnector: (não considerado nesta Norma).

	
Área funcional Presentation Control
	Módulo TestRule:
		<ruleBase>
			- id é livre
		<Rule>
			- id* é livre
			- var* deve obrigatoriamente possuir o mesmo valor do atributo name de um elemento <property>, definido como filho do elemento <media> do tipo application/x-gingasettings
			- comparator*
			- value*
			("As regras simples definem um identificador (atributo id), uma variável (atributo var), um valor (atributo value) e um comparador (atributo comparator) relacionando a variável a um valor.  ")

		<compositeRule>
			- id* é livre
			- operator* deve ser "and" ou "or"

	Módulo TestRuleUse:
		<bindRule>
			- constituent*
			- rule*
			("associar regras com componentes de um elemento <switch> ou <descriptorSwitch>, através de seus atributos rule e constituent, respectivamente.")

	Módulo ContentControl:
		<switch>
			- id* é livre
			- refer: atributo definido no módulo EntityReuse ("referencia um elemento id que será reusado")	(acho que é o id de um elemento que será reusado)		

		<defaultComponent>
			- component* deve ser do tipo IDREF ("identifica o elemento (default) que deve obrigatoriamente ser selecionado se nenhuma das regras bindRule for avaliada como verdadeira. ")

	Módulo DescriptorControl:
		<descriptorSwitch>
			- id* é livre

		<defaultDescriptor>
			- descriptor* deve ser do tipo IDREF


Área funcional Timing
	Módulo Timing:


Área funcional Reuse
	Módulo Import:
		<importBase>
-->			- documentURI* refere-se a um URI correspondente ao documento NCL contendo a base a ser importada
			- alias* é livre (especifica um nome a ser utilizado como prefixo quando for necessário referir-se a elementos dessa base importada)
			- region ("Quando presente, o atributo deve obrigatoriamente identificar o  id de um elemento <region> declarado no elemento <regionBase> do documento hospedeiro (documento que fez a operação de importação).")

		<importedDocumentBase>
			- id

		<importNCL>
			- alias* (a regra deve ser a mesma do <imporBase>)
-->			- documentURI* (a regra deve ser a mesma do <imporBase>)

		- a referência ao atributo alias deve ter o formato: alias#element_id

	Módulo ExtendedEntityReuse:


Área funcional Navigational Key
	Módulo  KeyNavigation:
		
		- focusIndex para <media>
		- moveUp, moveDown, moveRight e moveLeft
		- focusSrc possui as mesmas regras do scr do <media>
		- focusBorderColor pode receber os nomes reservados de cor: “white”, “black”, “silver”, “gray”, “red”, “maroon”, “fuchsia”, “purple”, “lime”, “green”, “yellow”, “olive”, “blue”, “navy”, “aqua”, ou “teal”
		- focusBorderWidth pode ser 0, positivo ou negativo
		- focusBorderTransparency pode ser um valor real entre 0 e 1 ou deve ser um valor real pertencente a [0,100] mais o caractere %.
		- focusSelSrc possui as mesmas regras do scr do <media>
		- 
atributo selBorderColor (provavelmente mesmas regras do focusBorderColor acima)		


Área funcional Animation
	Módulo Animation:


Área funcional SMIL Transition Effects
	Módulo TransitionBase:
		<transitionBase>
			- id é livre

	Módulo BasicTransitions:
		<transition>
			- id* é livre
			- type*: "barWipe", "irisWipe", "clockWipe", "snakeWipe" ou "fade"
			- subtype: (os valores default para cada type estão na Tabela 36 na página 60)
			- dur: valor numérico (não sei se é natural ou real positivo) ("especifica a duração da transição")
			- startProgress e endProgress devem pertencer à faixa de valores dos números reais na faixa [0.0,1.0]
			- direction pode ser "foward" ou "reverse"
			- fadeColor: deve ser uma cor
			- horRepeat: (acho que será um natural) ("quantas vezes será realizado o padrão de transições ao longo do eixo horizontal")
			- vertRepeat: (acho que será um natural) ("quantas vezes será realizado o padrão de transição ao longo do eixo vertical")
			- borderWidth só pode ter valores maiores ou iguais a 0
			- borderColor poderá ter como valor uma cor ou "blend" caso o type não for "fade"


Área funcional SMIL Metainformation
	Módulo Metainformation:
		<meta>
			- name*
			- content*

		<metadata>
