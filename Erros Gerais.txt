Área funcional Structure:
	Módulo Structure (<ncl>, <head> e <body>):
		- id não é obrigatório para <head> e <body>
		- atributo xmlns do <ncl> tem que ser uma das URLs: "http://www.ncl.org.br/NCL3.0/EDTVProfile", "http://www.ncl.org.br/NCL3.0/BDTVProfile" ou "http://www.ncl.org.br/NCL3.0/CausalConnectorProfile"
		- a ordem dos filhos de <head> deve ser: importedDocumentBase, ruleBase, transitionBase, regionBase, descriptorBase, connectorBase, meta e metadata.
		- Warning: <body> tem que ter pelo menos uma porta


Área funcional Layout:
	Módulo Layout: 
		- <regionbase> deve estar dentro do <head>
		- <regionbase> pode ter um id
		- <region> tem que ter id
		- device do <regionbase> pode ser: "systemScreen (i)" ou "systemAudio (i)"
		- <region> pode ter (além do id) os seguintes atributos: title, left, right, top, bottom, height, width e zIndex.
		- nos atributos de <region> que definem posição (title, left, right, top, bottom, height e width) os valores definidos em pixels deve ter "px" ou null após o valor e em porcentagem deve ter "%".
		- Warning: valores definidos ultrapassam os possíveis
		- Warning: zindex iguais


Área funcional Components:
	Módulo media: (<media>)
		- <media> pode ter (além do id) src e type.
		- <media> pode ter também instance, refer e descriptor (discutidos mais adiante)
		- src só pode ter URI como definido na tabela 11
		- type só pode ter valores do tipo mimetypes (tabela 13, na página 40, contém apenas alguns exemplos)
		- type é opcional (exceto para os elementos <media> sem atributo  src definido)
		//- Warning: Quando o atributo type não é especificado, recomenda-se que o formatador use a extensão do conteúdo especificado no atributo src para fazer a escolha do exibidor. 
		- Siga a tabela 14 sem restrição

	Módulo context: (<context>)
		- tabela 15 sem restrição

	Página 41: "No NCM, todo nó (mídia ou contexto) deve obrigatoriamente possuir uma âncora com uma região representando o conteúdo total do nó. Essa âncora é chamada de âncora de conteúdo total e é declarada por omissão (default) em NCL"


Área funcional Interfaces:
	Módulo MediaContentAnchor: (<area>)
		- Se optar por first e last (por amostra), então estes devem obrigatoriamente ser definidos.
		- Warning: begin sem end ou end sem begin (adotará como padrão o começo ou fim da âncora)
		- Warning: first sem last ou last sem firs (adotará o padrão)
		- caso <media> seja do tipo application/x-ginga-time, os atributos begin e end devem ser especificados e seus valores serão do tipo tempo absoluto do horário  de Greenwich 

	Módulo CompositeNodeInterface: (<port> )
		- Siga a tabela 17 sem restrição

	Módulo PropertyAnchor: (<property>)
		-  <property> pode ter value e name
		- Não pode haver mais de um <property> com o mesmo name dentro de um elemento pai 
		- Todas as interfaces devem obrigatoriamente ser explicitamente definidas (não é obrigatório, mas é muito aconselhável (página 42, segundo parágrafo depois da tabela))
		?- As palavras top, left, bottom, right, width, height, explicitDur, background, transparency,  visible,  fit,  scroll,  style,  soundLevel,  balanceLevel,  trebleLevel,  bassLevel,  fontColor, fontFamily, fontStyle, fontSize, fontVariant, fontWeight, reusePlayer, playerLife,  location,  size e  bounds  são palavras reservadas para valores do mesmo atributo name do elemento <property>.

	Módulo SwitchInterface: (<switch>)
		- <switchport>  está definido na tabela 19 sem restrição
		- cada elemento representando uma interface de objeto (<area>, <port>, <property> e <switchPort>) deve obrigatoriamente ter um id
		//- ver mais sobre o <switch>


Área funcional Presentation Specification
	Módulo Descriptor: (<descriptor>)
		- <descriptor> deve estar dentro do <descriptorbase>
		- <descriptor> tem que ter id
		- <descriptor> pode ter os atributos explicitDur e freeze (discutidos mais adiante)
		- <descriptor> pode ter os atributos player, region, 
		- <descriptor> pode ter os atributos moveLeft,  moveRight,  moveUp;  moveDown,  focusIndex,  focusBorderColor;  focusBorderWidth; focusBorderTransparency,  focusSrc,  selBorderColor, e  focusSelSrc (discutidos mais adiante)
		- <descriptor> pode ter os atributos transIn e transOut
		- <descriptor> pode ter o elemento <descriptorParam>
		- <descriptorParam> tem o atributo name
		- top, left, bottom, right, width, height, explicitDur, location, size, bounds, background, visible, fit,  scroll, style, soundLevel, balanceLevel, trebleLevel, bassLevel, reusePlayer e playerLife são palavras reservadas para valores do atributo name do elemento <descriptorParam>
		- tabela 20 (página 44) para os valores possíveis dos nomes reservados de parâmetros/atributos
		- <descriptor> pode ter atributos definidos na área funcional Transition Effects de SMIL (discutidos mais adiante)
		- Warning: vários valores para o mesmo atributo (NOTA da página 45)
		?- Quando um perfil de linguagem utiliza o módulo Descriptor, ele deve obrigatoriamente determinar como os descritores estarão associados com os componentes do documento.
		- tabela 21


Área funcional Linking
	Módulo Linking: (<link>)
		- <link> pode ter id
		- <link> tem que obrigatoriamente ter xconnector
		- xconnector deve ter algum dos seguintes formatos: alias#connector_id, documentURI_value#connector_id ou connector_id
		- <link> pode ter <bind>
		- <bind> tem que ter os atributos role e component 
		- <bind> pode ter os atributos interface e descriptor
		- se o elemento <conector> definir parâmetros , convém aos elementos <bind> ou <link> definirem valores para esses parâmetros, através de seus elementos-filhos chamados <bindParam> e <linkParam>, respectivamente, ambos com atributos name e  value. Nesse caso, o atributo name deve obrigatoriamente fazer referência ao nome de um parâmetro do conector, enquanto o atributo  value deve obrigatoriamente definir   um valor a ser atribuído ao respectivo parâmetro.
		

Área funcional Connectors
	Módulo ConnectorCommonPart: (<connectorParam>)
		- <connectorParam> tem os atributos name e type	
	
	Módulo ConnectorAssessmentExpression: (<assessmentStatement>, <attributeAssessment>, <valueAssessment> e <compoundStatement>)
		- <attributeAssessment> tem um atributo  role, que deve obrigatoriamente ser único no conjunto de  roles do conector
		- <attributeAssessment> possui um atributo eventType.
		- se o valor do eventType for "selection" então o key deve ser definido
		- se o valor do eventType for "presentation" então o attributeType deverá ser: “occurrences”, “repetitions” ou “state”.
		- se o valor do eventType for "selection" então o attributeType é opcional, podendo ser "occurrences" ou "state" 
		- se o valor do eventType for “attribution” então o attributeType é opcional, podendo ser "occurrences", "state", "repetiton" ou "nodeProperty"
		- <valueAssessment> deve ter o atributo value que deve assumir um valor de estado de evento, ou qualquer valor a ser comparado com uma propriedade do nó ou atributo de evento.
		- <assessmentStatement> tem um atributo  comparator
		- <assessmentStatement> compara os elementos <attributeAssessment> (valor de propriedade do nó [eventType = “attribution” e o attributeType = “nodeProperty”]; ou um valor de atributo de evento [eventType = (“presentation”, “attribution” ou “selection”) e o  attributeType = (“occurrences” ou “repetition”)]; ou um estado de evento [eventType = (“presentation”, “attribution” ou “selection”) e o attributeType = “state”];) e <valueAssessment> ( valor de seu atributo value)
		- <compoundStatement> tem um atributo operator que dever ser "and" ou "or" para relacionar seus filhos <assessmentStatement> ou <compoundStatement>
		- <compoundStatement> pode ter um atributo isNegated
	
	Módulo ConnectorCausalExpression:
		- <simpleCondition> tem um atributo role, que deve ser único no conjunto de roles do conector
		- eventType e transition são eventos opcionais de <simpleCondition> se puderem ser inferidos pelo valor do atributo  role se forem utilizados valores reservados, caso contrário são obrigatórios
		- Tabela 24 (página 49): definição dos valores reservados utilizados para definir os  roles em <simpleCondition>
		- se eventType tiver o valor "selection" o  role pode também definir sobre qual dispositivo a seleção se refere através do atributo key
		- key deve aceitar pelo menos os seguintes valores: “0”, “1”, “2”, “3”, “4”, “5”, “6”, “7”, “8”, “9”, “A”, “B”, “C”, “D”, “E”, “F”, “G”, “H”, “I”, “J”, “K”, “L”, “M”, “N”, “O”, “P”, “Q”, “R”, “S”, “T”, “U”, “V”, “W”, “X”, “Y”, “Z”, “*”, “#”, “MENU”, “INFO”, “GUIDE”, “CURSOR_DOWN”, “CURSOR_LEFT”, “CURSOR_RIGHT”, “CURSOR_UP”, “CHANNEL_DOWN”, “CHANNEL_UP”, “VOLUME_DOWN”, “VOLUME_UP”, “”, “ENTER”, “RED”, “GREEN”, “YELLOW”, “BLUE”, “BACK”, “EXIT”, “POWER”, “REWIND”, “STOP”, “EJECT”, “PLAY”, “RECORD” e “PAUSE” 
		- min deve ser um valor finito positivo, maior que zero e menor ou igual ao valor max
		- ?Warning?: não definir min e max (o default é 1 um para ambos)
		- caso não forem definidos min e max ou caso max seja "unbounded" então deve-se definir o atributo qualifier
		- ?Warning?: não definir qualifier (default é "or")
		- <compoundCondition> tem um atributo operator, que deve ser "and" ou "or"
		- <compoundCondition> pode ter o atributo delay
		- <simpleAction> tem um atributo  role, que deve obrigatoriamente ser único no conjunto de roles do conector
		- eventType e  actionType são opcionais se puderem ser inferidos pelo valor de  role, se forem utilizados valores reservados. Caso contrário são obrigatórios
		- Tabela 26 (página 50): valores reservados utilizados para definir os roles de um <simpleaction>
		- Se um valor eventType for “attribution”, o elemento <simpleAction> também deve obrigatoriamente definir o valor a ser atribuído, através de seu atributo value. Se esse valor for especificado como “$anyName” (onde o $ é símbolo reservado e anyName é qualquer cadeia de caracteres, exceto um dos nomes reservados para papéis), o valor a ser atribuído deve ser obtido da propriedade ligada à  role=“anyName”, definida em um elemento <bind> do elemento <link> que utiliza o conector. Se esse valor não puder ser obtido, nenhuma atribuição deve ser realizada.
		- No caso de value=“$anyName”, o valor a ser atribuído deve obrigatoriamente  ser o valor de uma propriedade (elemento <property>) de um componente da mesma composição onde o elo (elemento <link>) que referencia o evento é definido, ou uma propriedade da composição onde o elo é definido, ou uma propriedade de um elemento acessível através de uma porta da composição onde o elo é definido, ou ainda uma propriedade de um elemento acessível através de uma porta de uma composição (elementos <port> ou <switchPort>) aninhada na mesma composição onde o elo é definido. 
 		- Quando max for maior que um (inclusive unbounded), <simpleAction> deve possuir um qualificador com valor "par" ou "seq"
		- <simpleAction> pode possuir os atributos delay e repeat (e também repeattions e repeatdelay)
		- caso o valor do eventType for “attribution”, o <simpleAction> pode possuir os atributos duration e by (Área Animation) (discutidos mais adiante)
		- <compoundAction> tem que ter um atributo operator, que deve possuir os valores "par" ou "seq"
		- caso o value do <simpleAction> for declarado como "$anyName" então anyName não pode ser um dos nomes reservados para o role
	
	Módulo ConnectorTransitionAssessment:
	
	Módulo CausalConnector:
		- <causalconnector> deve ter um id
		- <causalConnector> pode ter os elementos <connectorParam> como filhos
		- Para especificar quais atributos recebem valores de parâmetro definidos pelo conector, seus valores são especificados como o nome do parâmetro, precedido pelo símbolo $.  
		- Tabela 28
	
	Módulo ConstraintConnector: (não considerado nesta Norma)
	
	Módulo ConnectorBase: (<connectorBase>)
		- Warning: recomenda-se que <connectorBase> tenha um id
		- O Anexo C fornece um exemplo de definições de conectores que podem ser importadas
		- Tabela 29 sem restrição
	
	Módulo CompositeConnector: (não considerado nesta Norma).


 

Área funcional Presentation Control
	Módulo TestRule:
		- <rulebase> deve ser filho do <head> 
		- <rule> possui os atributos id, var, value e comparator
		- o atributo  var deve obrigatoriamente possuir o mesmo valor do atributo name de um elemento <property>, definido como filho do elemento <media> do tipo application/x-gingasettings
		- <compositeRule> possui os atributos id e operator
		- operator deve ser "and" ou "or"
		- Tabela 30 sem restrição
	
	Módulo TestRuleUse: (<bindRule> )
		- Tabela 31 sem restrição
		
	Módulo ContentControl: (<switch> e <defaultComponent>)
		- <switch> deve ter id
		- <switch> possui um atributo refer, que é uma extensão definida no módulo Reuse (discutido mais adiante)
		- <defaultComponent> possui o atributo component
		- component deve ser do tipo IDREF
		- identifica o elemento (default) que deve obrigatoriamente ser selecionado se nenhuma das regras bindRule for avaliada como verdadeira 
		- Warning: Para permitir a definição de elos que se ligam a âncoras do componente escolhido depois da avaliação das regras de um  switch, recomenda-se que um perfil da linguagem também inclua o módulo SwitchInterface, que permite a definição de interfaces especiais, chamadas <switchPort>.  
		- Quando um <context> é definido como elemento-filho de um <switch>, os elementos <link> recursivamente contidos no elemento <context> devem obrigatoriamente ser considerados por um exibidor NCL apenas se <context> for selecionado após a avaliação do switch. Caso contrário, recomenda-se que os elementos <link> sejam considerados desabilitados e obrigatoriamente não devem interferir na apresentação do documento.		
		- Tabela 32 sem restrição
		- caso o refer não seja igual ao id de um elemento <media>, <context>, <body> ou <switch>.

	Módulo DescriptorControl: (<descriptorSwitch> e <defaultDescriptor>)
		- <descriptorSwitch> deve ter um id
		- <defaultDescriptor> possui o atributo descriptor
		- o atributo descriptor descriptor (do tipo IDREF) identifica o elemento (default) que deve obrigatoriamente ser selecionado se nenhuma das regras bindRule for avaliada como verdadeira. 
		- Tabela 33 sem restrição


Área funcional Timing
	Módulo Timing:
		- atributos freeze e explictDur podem ser incorporados pelos elementos <descriptor>


Área funcional Reuse
	Módulo Import: (<importBase>)
		- <importBase> tem os atributos documentURI e alias
		- o atributo  documentURI refere-se a um URI correspondente ao documento NCL contendo a base a ser importada
		- o atributo alias especifica um nome a ser utilizado como prefixo quando for necessário referir-se a elementos dessa base importada
		- o nome do atributo alias deve obrigatoriamente ser único em um documento e seu escopo é restrito ao documento que o definiu
		- a referência ao atributo alias deve ter o formato: alias#element_id
		- Quando um perfil de linguagem utiliza o módulo Import o elemento <descriptorBase> pode ter um elemento-filho <importBase> referindo-se a um URI correspondente a um outro documento NCL contendo a base de descritores a ser importada (na verdade seus elementos-filhos) e aninhada
		- Quando um perfil de linguagem utiliza o módulo Import o elemento <connectorBase> pode ter um elemento-filho <importBase> referindo-se a um URI correspondente a uma outra base de conectores a  ser importada (na verdade seus elementos-filhos) e aninhada
		- Quando um perfil de linguagem utiliza o módulo Import o elemento <transitionBase> pode ter um elemento-filho <importBase> referindo-se a um URI correspondente a uma outra base de transições a ser importada (na verdade seus elementos-filhos) e aninhada
		- Quando um perfil de linguagem utiliza o módulo Import o elemento <regionBase> pode ter um elemento-filho <importBase> referindo-se a um URI correspondente a um outro documento NCL contendo a base da regiões a ser importada (na verdade seus elementos-filhos) e aninhada
			- Ao importar uma <regionBase>, um atributo opcional denominado region pode ser especificado, dentro de um elemento  <importBase>. Quando presente, o atributo deve obrigatoriamente identificar o  id de um elemento <region> declarado no elemento <regionBase> do documento hospedeiro (documento que fez a operação de importação). Como conseqüência, todos os elementos <region>, filhos do <regionBase> importados, devem obrigatoriamente ser considerados elementos <region> filhos da região referida pelo atributo  region do <importBase>. Se não especificado, os elementos <region>, filhos do <regionBase> importado, devem obrigatoriamente ser considerados filhos diretos do elemento <regionBase> do documento hospedeiro 		
		- <importedDocumentBase> deve ser definido como filho de <head>
		- <importedDocumentBase> deve ter um id
		- <importNCL> tem os atributos documentURI e  alias
		- o nome deve obrigatoriamente ser único (type=ID) e seu escopo é restrito ao documento que definiu o atributo alias
		- a referência ao atributo alias deve ter o formato: alias#element_id
		- Tabela 34 sem restrição

	Módulo EntityReuse: 
		- define um atributo refer que referencia um id que será reusado (refer só pode ter o valor de um id existente)
		- Apenas <media>, <context>, <body> e <switch> podem ser reusados
		- Um elemento que referencia um outro elemento não pode ser reusado
		- Se o nó referenciado for definido dentro de um documento D importado, o valor do atributo  refer deve obrigatoriamente ter o formato “alias#id”
		- Quando um perfil da linguagem utiliza o módulo EntityReuse, ele pode adicionar o atributo refer a:
			- um elemento <media> ou <switch>. Nesse caso,  o elemento referenciado deve obrigatoriamente ser, respectivamente, um elemento <media> ou <switch>, que representa o mesmo nó previamente definido no próprio <body> do documento ou em um <body> externo importado. O elemento referenciado deve obrigatoriamente conter diretamente a definição de todos os seus atributos e elementos-filhos; 
			- um elemento <context>. Nesse caso, o elemento referenciado deve obrigatoriamente ser um elemento <context> ou <body>, que representa o mesmo contexto previamente definido no <body> do próprio documento ou em um <body> externo importado. O elemento referenciado deve obrigatoriamente conter diretamente a definição de todos os seus atributos e elementos-filhos.
		- Quando um elemento declara um atributo  refer, todos os atributos e elementos-filhos definidos pelo elemento referenciado são herdados. Todos os outros atributos e elementos-filhos, se definidos pelo elemento que realiza a referência, devem obrigatoriamente ser ignorados pelo formatador, exceto o atributo id que deve obrigatoriamenteser definido. A única outra exceção é para elementos  <media>, para os quais novos elementos-filhos <area>  e <property> podem ser adicionados, e um novo atributo, instance, pode ser definido. 
		- Warning: dois <property> definidos no <media> reutilizado com mesmo name fará com que o último <property> seja ignorado

	Módulo ExtendedEntityReuse:

		- talvez ler o último parágrafo de 7.2.11


Área funcional Navigational Key
	Módulo  KeyNavigation:
		- atributo focusIndex para <media>
		- Warning: focusIndex devem ser únicos em um documento NCL (caso houverem repetidos eles devem ser ignorados)
		- Warning: quando um <media> referencia outro <media> (usando o refer) ele  deve obrigatoriamente ignorar o focusIndex especificado pelo elemento <descriptor> associado ao elemento <media> referido.
		- moveUp, moveDown, moveRight e moveLeft
		- focusSrc possui as mesmas regras do scr do <media>
		- focusBorderColor pode receber os nomes reservados de cor: “white”, “black”, “silver”, “gray”, “red”, “maroon”, “fuchsia”, “purple”, “lime”, “green”, “yellow”, “olive”, “blue”, “navy”, “aqua”, ou “teal”
		- focusBorderWidth pode ser 0, positivo ou negativo
		- focusBorderTransparency pode ser um valor real entre 0 e 1 ou deve ser um valor real pertencente a [0,100] mais o caractere %.
		- Warning?: caso não definidos, os três atributos acima receberão valores default
		- focusSelSrc possui as mesmas regras do scr do <media>
		- 
atributo selBorderColor (provavelmente mesmas regras do focusBorderColor acima)


Área funcional Animation
	Módulo Animation:
		- atributos duration e by que são utilizados pelo <simpleAction> caso o eventType seja "attribution"


Área funcional SMIL Transition Effects
	Módulo TransitionBase:
		- <transitionBase> deve ser definido como filho do <head>
		- Tabela 35 sem restrição

	Módulo BasicTransitions:
		- <transition> especificado no <transitionBase>
		- <transition> deve ter id
		- <transition> possui os atributos (além do id): type, subtype, dur, startProgress, endProgress, direction, e fadeColor
		- type é obrigatório
		- subtype é opcional e listado na tabela 36
		- startProgress e endProgress devem pertencer à faixa de valores dos números reais na faixa [0.0,1.0]
		- endProgress deve ser maior ou igual ao startProgress
		- direction pode ser "foward" ou "reverse"
		- fadeColor só deve ser especificado se o type for "fade" e o subtype for “fadeToColor” ou “fadeFromColor"
		- os atributos transIn e transOut podem possuir valores na forma de uma lista separada por ponto e vírgula dos identificadores de transição.
		- Tabela 37
		- atributo fadeColor declarado sem o type ser "fade" e subtype ser "fadeToColor" ou "fadeFromColor"

	Módulo TransitionModifiers:
		- atributos horRepeat e vertRepeat
		- atributo borderWidth só pode ter valores maiores ou iguais a 0
		- se o valor do atributo type não for "fade" então o borderColor poderá ter como valor uma cor ou "blend"


Área funcional SMIL Metainformation
	Módulo Metainformation:
		- <meta> possui os atributos name e content
		- <metadata> pode ter como elementos-filhos: elementos RDF e seus subelementos.
		- Tabela 38


- Referenciados têm que ser únicos